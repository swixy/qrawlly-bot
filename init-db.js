const db = require('./db');

console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
const today = new Date();
const slots = [];

// –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
for (let i = 0; i < 7; i++) {
  const date = new Date(today.getTime() + i * 24 * 60 * 60 * 1000);
  const dateStr = date.toISOString().split('T')[0];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã —Å 9:00 –¥–æ 18:00 –∫–∞–∂–¥—ã–π —á–∞—Å
  for (let hour = 9; hour <= 18; hour++) {
    const timeStr = `${hour.toString().padStart(2, '0')}:00`;
    slots.push([dateStr, timeStr]);
  }
}

// –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const insertSlots = () => {
  return new Promise((resolve, reject) => {
    const stmt = db.prepare('INSERT OR IGNORE INTO slots (date, time, is_booked) VALUES (?, ?, 0)');
    
    slots.forEach(([date, time]) => {
      stmt.run([date, time]);
    });
    
    stmt.finalize((err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:', err);
        reject(err);
      } else {
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${slots.length} —Å–ª–æ—Ç–æ–≤`);
        resolve();
      }
    });
  });
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã
const checkSlots = () => {
  return new Promise((resolve, reject) => {
    db.all('SELECT COUNT(*) as count FROM slots', [], (err, rows) => {
      if (err) {
        reject(err);
      } else {
        console.log(`üìä –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ: ${rows[0].count}`);
        resolve(rows[0].count);
      }
    });
  });
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã...');
    const existingSlots = await checkSlots();
    
    if (existingSlots === 0) {
      console.log('üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã...');
      await insertSlots();
      console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ—Ç—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ—Ç–æ–≤
    db.all('SELECT date, time FROM slots ORDER BY date, time LIMIT 10', [], (err, rows) => {
      if (!err && rows.length > 0) {
        console.log('\nüìÖ –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:');
        rows.forEach(row => {
          console.log(`  ${row.date} ${row.time}`);
        });
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db.close((err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
      } else {
        console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initDatabase(); 