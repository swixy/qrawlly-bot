// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { Pool } = require('pg');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞');
console.log('NODE_ENV:', process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

if (!process.env.DATABASE_URL) {
  console.log('\n‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º SQLite —Ç–µ—Å—Ç...');
  
  // –¢–µ—Å—Ç SQLite
  const sqlite3 = require('sqlite3').verbose();
  const db = new sqlite3.Database('./test.db');
  
  db.serialize(() => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    db.run(`CREATE TABLE IF NOT EXISTS test_table (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      message TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    db.run(`INSERT INTO test_table (message) VALUES ('–¢–µ—Å—Ç SQLite - ${new Date().toISOString()}')`);
    
    // –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
    db.all('SELECT * FROM test_table ORDER BY created_at DESC LIMIT 5', [], (err, rows) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SQLite:', err);
      } else {
        console.log('‚úÖ SQLite –∑–∞–ø–∏—Å–∏:');
        rows.forEach(row => {
          console.log(`   ID: ${row.id}, –°–æ–æ–±—â–µ–Ω–∏–µ: ${row.message}, –í—Ä–µ–º—è: ${row.created_at}`);
        });
      }
      db.close();
    });
  });
  
} else {
  console.log('\n‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL —Ç–µ—Å—Ç...');
  
  // –¢–µ—Å—Ç PostgreSQL
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });
  
  async function testPostgreSQL() {
    const client = await pool.connect();
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
      await client.query(`
        CREATE TABLE IF NOT EXISTS test_table (
          id SERIAL PRIMARY KEY,
          message TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await client.query(
        'INSERT INTO test_table (message) VALUES ($1)',
        [`–¢–µ—Å—Ç PostgreSQL - ${new Date().toISOString()}`]
      );
      
      // –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
      const result = await client.query('SELECT * FROM test_table ORDER BY created_at DESC LIMIT 5');
      
      console.log('‚úÖ PostgreSQL –∑–∞–ø–∏—Å–∏:');
      result.rows.forEach(row => {
        console.log(`   ID: ${row.id}, –°–æ–æ–±—â–µ–Ω–∏–µ: ${row.message}, –í—Ä–µ–º—è: ${row.created_at}`);
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ PostgreSQL:', error);
    } finally {
      client.release();
      await pool.end();
    }
  }
  
  testPostgreSQL();
}

console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
console.log('üí° –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –¥–µ–ø–ª–æ—è–º–∏, –±–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.'); 