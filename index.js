const { Telegraf, session, Scenes, Markup } = require('telegraf');
const cron = require('node-cron');
const db = require('./db');
const bookingScene = require('./scenes/booking');
const addslotScene = require('./scenes/addslot');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∑–∞—Ç–µ–º config.js
let config;
try {
  config = require('./config');
} catch (error) {
  // –ï—Å–ª–∏ config.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  config = {
    BOT_TOKEN: process.env.BOT_TOKEN,
    ADMIN_ID: parseInt(process.env.ADMIN_ID),
    REMINDER_HOURS: parseInt(process.env.REMINDER_HOURS) || 2
  };
}

const { BOT_TOKEN, ADMIN_ID, REMINDER_HOURS } = config;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('–î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ config.js –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!ADMIN_ID) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('–î–æ–±–∞–≤—å—Ç–µ ADMIN_ID –≤ config.js –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
console.log(`ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: ${BOT_TOKEN.substring(0, 10)}...`);
console.log(`üë§ –ê–¥–º–∏–Ω ID: ${ADMIN_ID}`);
console.log(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ ${REMINDER_HOURS} —á–∞—Å–æ–≤`);

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
  return new Promise((resolve, reject) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ—Ç—ã –≤ –±–∞–∑–µ
    db.get('SELECT COUNT(*) as count FROM slots', [], (err, row) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
        reject(err);
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ –Ω–∞ Railway
      if (row.count === 0 && !process.env.DATABASE_URL) {
        console.log('üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã...');
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
        const today = new Date();
        const slots = [];
        
        for (let i = 0; i < 7; i++) {
          const date = new Date(today.getTime() + i * 24 * 60 * 60 * 1000);
          const dateStr = date.toISOString().split('T')[0];
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã —Å 9:00 –¥–æ 18:00 –∫–∞–∂–¥—ã–π —á–∞—Å
          for (let hour = 9; hour <= 18; hour++) {
            const timeStr = `${hour.toString().padStart(2, '0')}:00`;
            slots.push([dateStr, timeStr]);
          }
        }
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã
        const stmt = db.prepare('INSERT OR IGNORE INTO slots (date, time, is_booked) VALUES (?, ?, 0)');
        slots.forEach(([date, time]) => {
          stmt.run([date, time]);
        });
        
        stmt.finalize((err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:', err);
            reject(err);
          } else {
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${slots.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤`);
            resolve();
          }
        });
      } else if (row.count === 0 && process.env.DATABASE_URL) {
        console.log('üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ù–∞ Railway —Å–ª–æ—Ç—ã –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é.');
        resolve();
      } else {
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç ${row.count} —Å–ª–æ—Ç–æ–≤`);
        resolve();
      }
    });
  });
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const bot = new Telegraf(BOT_TOKEN, {
  telegram: {
    // –û—Ç–∫–ª—é—á–∞–µ–º webhook –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    webhookReply: false
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω
const stage = new Scenes.Stage([bookingScene, addslotScene]);
bot.use(session());
bot.use(stage.middleware());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.start((ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
    ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
    ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
  ]).resize());
});

bot.hears('‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É', (ctx) => ctx.scene.enter('booking'));
bot.hears('üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', (ctx) => {
  db.all(
    `SELECT s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE b.user_id=? AND b.status='confirmed' ORDER BY s.date, s.time`,
    [ctx.from.id],
    (err, rows) => {
      if (rows.length === 0) return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.');
      const list = rows.map(r => `üìÖ ${formatDateDMY(r.date)} ‚è∞ ${r.time}`).join('\n');
      ctx.reply(`–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n${list}`);
    }
  );
});

// –ü–æ–º–æ—â—å
bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', (ctx) => ctx.reply('/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n@streetnoiser - —Å–≤—è–∑–∞—Ç—å—Å—è'));

// –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
bot.command('addslot', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const args = ctx.message.text.split(' ');
  if (args.length < 3) return ctx.reply('–§–æ—Ä–º–∞—Ç: /addslot YYYY-MM-DD HH:MM');
  db.run(`INSERT INTO slots (date,time) VALUES (?,?)`, [args[1], args[2]]);
  ctx.reply(`–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ${args[1]} ${args[2]}`);
});

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–∞–∂–¥—ã–π —á–∞—Å)
cron.schedule('0 * * * *', () => {
  const now = new Date();
  const reminderTime = new Date(now.getTime() + REMINDER_HOURS * 60 * 60 * 1000);
  const dateStr = reminderTime.toISOString().split('T')[0];
  const timeStr = reminderTime.toTimeString().slice(0, 5);
  db.all(`SELECT b.user_id, s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE s.date=? AND s.time=?`,
    [dateStr, timeStr], (err, rows) => {
      rows.forEach(r => {
        bot.telegram.sendMessage(r.user_id, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í–∞—à–∞ —Å—Ç—Ä–∏–∂–∫–∞ ${r.date} –≤ ${r.time}`);
      });
    });
});

bot.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', (ctx) => {
    db.all(
      `SELECT b.id, s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE b.user_id=? AND b.status='confirmed' ORDER BY s.date, s.time`,
      [ctx.from.id],
      (err, rows) => {
        if (!rows || rows.length === 0) {
          return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
        const buttons = rows.map(r =>
          [Markup.button.callback(`‚ùå ${formatDateDMY(r.date)} ${r.time}`, `cancel_${r.id}`)]
        );
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:', Markup.inlineKeyboard(buttons));
      }
    );
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
bot.action(/cancel_(\d+)/, (ctx) => {
  const bookingId = ctx.match[1];
  db.get(
    `SELECT slot_id, date, time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE b.id=? AND b.user_id=? AND b.status='confirmed'`,
    [bookingId, ctx.from.id],
    (err, booking) => {
      if (!booking) {
        ctx.answerCbQuery();
        return ctx.editMessageText('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      }
      db.run(`UPDATE bookings SET status='cancelled' WHERE id=?`, [bookingId]);
      db.run(`UPDATE slots SET is_booked=0 WHERE id=?`, [booking.slot_id]);
      ctx.answerCbQuery();
      ctx.editMessageText('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      ctx.reply(
        `‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\nüìÖ –î–∞—Ç–∞: ${formatDateDMY(booking.date)} (${getWeekdayFullRu(booking.date)})\n‚è∞ –í—Ä–µ–º—è: ${booking.time}\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.`,
        Markup.keyboard([
          ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
          ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
          ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
        ]).resize()
      );
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      ctx.telegram.sendMessage(
        require('./config').ADMIN_ID,
        `‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.from.username || ''} (${ctx.from.first_name || ''})\nüìÖ –î–∞—Ç–∞: ${formatDateDMY(booking.date)} (${getWeekdayFullRu(booking.date)})\n‚è∞ –í—Ä–µ–º—è: ${booking.time}`
      );
    }
  );
});

// === –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ===

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
bot.command('today', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const today = new Date().toISOString().split('T')[0];
  db.all(
    `SELECT b.id, b.user_id, b.username, b.full_name, s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE s.date=? AND b.status='confirmed' ORDER BY s.date, s.time`,
    [today],
    (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.');
      const list = rows.map(r => `@${r.username || ''} (${r.full_name || ''}) ‚Äî ${formatDateDMY(r.date)} ${r.time}`).join('\n');
      ctx.reply('–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n' + list);
    }
  );
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
bot.command('tomorrow', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const tomorrow = new Date(Date.now() + 24*60*60*1000).toISOString().split('T')[0];
  db.all(
    `SELECT b.id, b.user_id, b.username, b.full_name, s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE s.date=? AND b.status='confirmed' ORDER BY s.date, s.time`,
    [tomorrow],
    (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–ù–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.');
      const list = rows.map(r => `@${r.username || ''} (${r.full_name || ''}) ‚Äî ${formatDateDMY(r.date)} ${r.time}`).join('\n');
      ctx.reply('–ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n' + list);
    }
  );
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
bot.command('freeslots', (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    db.all(`SELECT date, time FROM slots WHERE is_booked=0 ORDER BY date, time`, [], (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.');
      const list = rows.map(r => `${formatDateDMY(r.date)} ${r.time}`).join('\n');
      ctx.reply('–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:\n' + list);
    });
  });
// –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç
  bot.command('addslot', (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    ctx.scene.enter('addslot');
  })

// –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
bot.command('deleteslot', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const args = ctx.message.text.split(' ');
  if (args.length < 3) return ctx.reply('–§–æ—Ä–º–∞—Ç: /deleteslot YYYY-MM-DD HH:MM');
  db.run(`DELETE FROM slots WHERE date=? AND time=?`, [args[1], args[2]], function(err) {
    if (this.changes === 0) return ctx.reply('–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    ctx.reply('–°–ª–æ—Ç —É–¥–∞–ª—ë–Ω.');
  });
});

// –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
bot.command('broadcast', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const text = ctx.message.text.replace('/broadcast', '').trim();
  if (!text) return ctx.reply('–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.');
  db.all(`SELECT DISTINCT user_id FROM bookings`, [], (err, rows) => {
    if (!rows || rows.length === 0) return ctx.reply('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
    rows.forEach(r => {
      bot.telegram.sendMessage(r.user_id, text).catch(() => {});
    });
    ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
  });
});


// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.command('stats', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  db.get(`SELECT COUNT(DISTINCT user_id) as users FROM bookings`, [], (err, row1) => {
    db.get(`SELECT COUNT(*) as total FROM bookings WHERE status='confirmed'`, [], (err, row2) => {
      db.get(`SELECT COUNT(*) as free FROM slots WHERE is_booked=0`, [], (err, row3) => {
        ctx.reply(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${row1.users}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${row2.total}\n–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${row3.free}`);
      });
    });
  });
});

// –ê–¥–º–∏–Ω-–º–µ–Ω—é
bot.command('admin', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply('–ê–¥–º–∏–Ω-–º–µ–Ω—é:', Markup.keyboard([
    ['üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üü¢ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã'],
    ['üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç'],
    ['üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é', '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç'],
    ['üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞']
  ]).resize());
});

// –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
bot.hears('üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const today = new Date();
  const weekDates = Array.from({length: 7}, (_, i) => {
    const d = new Date(today.getTime() + i * 24*60*60*1000);
    return d.toISOString().split('T')[0];
  });
  db.all(
    `SELECT b.id, b.user_id, b.username, b.full_name, s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE s.date IN (${weekDates.map(() => '?').join(',')}) AND b.status='confirmed' ORDER BY s.date, s.time`,
    weekDates,
    (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.');
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º –∏ –≤—Ä–µ–º–µ–Ω–∏
      const groupedByDate = {};
      rows.forEach(r => {
        const dateKey = `${formatDateDMY(r.date)} (${getWeekdayFullRu(r.date)})`;
        if (!groupedByDate[dateKey]) {
          groupedByDate[dateKey] = {};
        }
        if (!groupedByDate[dateKey][r.time]) {
          groupedByDate[dateKey][r.time] = [];
        }
        groupedByDate[dateKey][r.time].push(`@${r.username || ''} (${r.full_name || ''})`);
      });
      
      const list = Object.keys(groupedByDate).sort().map(date => {
        const timesList = Object.keys(groupedByDate[date]).sort().map(time => 
          `  ${time}: ${groupedByDate[date][time].join(', ')}`
        ).join('\n');
        return `${date}:\n${timesList}`;
      }).join('\n\n');
      
      ctx.reply('–ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n' + list);
    }
  );
});

// –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü
bot.hears('üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const firstDay = `${year}-${month}-01`;
  const nextMonth = new Date(year, today.getMonth() + 1, 1);
  const lastDay = new Date(nextMonth - 1).toISOString().split('T')[0];
  db.all(
    `SELECT b.id, b.user_id, b.username, b.full_name, s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE s.date >= ? AND s.date <= ? AND b.status='confirmed' ORDER BY s.date, s.time`,
    [firstDay, lastDay],
    (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.');
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º –∏ –≤—Ä–µ–º–µ–Ω–∏
      const groupedByDate = {};
      rows.forEach(r => {
        const dateKey = `${formatDateDMY(r.date)} (${getWeekdayFullRu(r.date)})`;
        if (!groupedByDate[dateKey]) {
          groupedByDate[dateKey] = {};
        }
        if (!groupedByDate[dateKey][r.time]) {
          groupedByDate[dateKey][r.time] = [];
        }
        groupedByDate[dateKey][r.time].push(`@${r.username || ''} (${r.full_name || ''})`);
      });
      
      const list = Object.keys(groupedByDate).sort().map(date => {
        const timesList = Object.keys(groupedByDate[date]).sort().map(time => 
          `  ${time}: ${groupedByDate[date][time].join(', ')}`
        ).join('\n');
        return `${date}:\n${timesList}`;
      }).join('\n\n');
      
      ctx.reply('–ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü:\n' + list);
    }
  );
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
bot.hears('‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  db.all(`SELECT id, date, time FROM slots ORDER BY date, time`, [], (err, rows) => {
    if (!rows || rows.length === 0) return ctx.reply('–°–ª–æ—Ç–æ–≤ –Ω–µ—Ç.');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–Ω—è–º
    const groupedByDate = {};
    rows.forEach(r => {
      const dateKey = `${formatDateDMY(r.date)} (${getWeekdayFullRu(r.date)})`;
      if (!groupedByDate[dateKey]) {
        groupedByDate[dateKey] = [];
      }
      groupedByDate[dateKey].push({ id: r.id, time: r.time });
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    const buttons = [];
    Object.keys(groupedByDate).sort().forEach(date => {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞)
      buttons.push([Markup.button.callback(`üìÖ ${date}`, 'ignore')]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      const timeButtons = groupedByDate[date].sort((a, b) => a.time.localeCompare(b.time)).map(slot => 
        Markup.button.callback(`‚ùå ${slot.time}`, `delete_slot_${slot.id}`)
      );
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 3
      for (let i = 0; i < timeButtons.length; i += 3) {
        buttons.push(timeButtons.slice(i, i + 3));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –¥–Ω—è–º–∏
      buttons.push([]);
    });
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (buttons.length > 0 && buttons[buttons.length - 1].length === 0) {
      buttons.pop();
    }
    
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', Markup.inlineKeyboard(buttons));
  });
});
bot.action(/delete_slot_(\d+)/, (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  const slotId = ctx.match[1];
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
  db.get(`SELECT date, time FROM slots WHERE id=?`, [slotId], (err, slot) => {
    if (!slot) {
      ctx.answerCbQuery('–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return ctx.editMessageText('–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
    db.run(`DELETE FROM slots WHERE id=?`, [slotId], function(err) {
      if (this.changes === 0) {
        ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.');
        return ctx.editMessageText('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞.');
      }
      
      ctx.answerCbQuery('–°–ª–æ—Ç —É–¥–∞–ª—ë–Ω.');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
      const deletedInfo = `‚ùå –°–ª–æ—Ç —É–¥–∞–ª—ë–Ω!\n\nüìÖ –î–∞—Ç–∞: ${formatDateDMY(slot.date)} (${getWeekdayFullRu(slot.date)})\n‚è∞ –í—Ä–µ–º—è: ${slot.time}`;
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã
      ctx.editMessageText(deletedInfo, Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã', 'show_remaining_slots')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–¥–∞–ª–µ–Ω–∏—é', 'back_to_delete_slots')]
      ]));
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ª–æ—Ç–æ–≤
bot.action('show_remaining_slots', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  db.all(`SELECT date, time FROM slots ORDER BY date, time`, [], (err, rows) => {
    if (!rows || rows.length === 0) {
      ctx.answerCbQuery();
      return ctx.editMessageText('–°–ª–æ—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.');
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–Ω—è–º
    const groupedByDate = {};
    rows.forEach(r => {
      const dateKey = `${formatDateDMY(r.date)} (${getWeekdayFullRu(r.date)})`;
      if (!groupedByDate[dateKey]) {
        groupedByDate[dateKey] = [];
      }
      groupedByDate[dateKey].push(r.time);
    });
    
    const list = Object.keys(groupedByDate).sort().map(date => {
      const timesList = groupedByDate[date].sort().join(', ');
      return `${date}:\n  ${timesList}`;
    }).join('\n\n');
    
    ctx.answerCbQuery();
    ctx.editMessageText(`üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–¥–∞–ª–µ–Ω–∏—é', 'back_to_delete_slots')]
    ]));
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Å–ª–æ—Ç–æ–≤
bot.action('back_to_delete_slots', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  
  db.all(`SELECT id, date, time FROM slots ORDER BY date, time`, [], (err, rows) => {
    if (!rows || rows.length === 0) {
      ctx.answerCbQuery();
      return ctx.editMessageText('–°–ª–æ—Ç–æ–≤ –Ω–µ—Ç.');
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–Ω—è–º
    const groupedByDate = {};
    rows.forEach(r => {
      const dateKey = `${formatDateDMY(r.date)} (${getWeekdayFullRu(r.date)})`;
      if (!groupedByDate[dateKey]) {
        groupedByDate[dateKey] = [];
      }
      groupedByDate[dateKey].push({ id: r.id, time: r.time });
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    const buttons = [];
    Object.keys(groupedByDate).sort().forEach(date => {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞)
      buttons.push([Markup.button.callback(`üìÖ ${date}`, 'ignore')]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      const timeButtons = groupedByDate[date].sort((a, b) => a.time.localeCompare(b.time)).map(slot => 
        Markup.button.callback(`‚ùå ${slot.time}`, `delete_slot_${slot.id}`)
      );
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 3
      for (let i = 0; i < timeButtons.length; i += 3) {
        buttons.push(timeButtons.slice(i, i + 3));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –¥–Ω—è–º–∏
      buttons.push([]);
    });
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (buttons.length > 0 && buttons[buttons.length - 1].length === 0) {
      buttons.pop();
    }
    
    ctx.answerCbQuery();
    ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', Markup.inlineKeyboard(buttons));
  });
});

// –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ  
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç', (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    ctx.scene.enter('addslot');
  });

// –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
let adminBroadcastStep = {};
bot.hears('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  adminBroadcastStep[ctx.from.id] = true;
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:', Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É']]).resize());
});

// –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
bot.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  adminBroadcastStep[ctx.from.id] = false;
  ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', Markup.keyboard([
    ['üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üü¢ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã'],
    ['üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç'],
    ['üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é', '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç'],
    ['üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞']
  ]).resize());
});

bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  db.get(`SELECT COUNT(DISTINCT user_id) as users FROM bookings`, [], (err, row1) => {
    db.get(`SELECT COUNT(*) as total FROM bookings WHERE status='confirmed'`, [], (err, row2) => {
      db.get(`SELECT COUNT(*) as free FROM slots WHERE is_booked=0`, [], (err, row3) => {
        ctx.reply(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${row1.users}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${row2.total}\n–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${row3.free}`);
      });
    });
  });
});

bot.hears('üü¢ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã', (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    db.all(`SELECT date, time FROM slots WHERE is_booked=0 ORDER BY date, time`, [], (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.');
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–Ω—è–º
      const groupedByDate = {};
      rows.forEach(r => {
        const dateKey = `${formatDateDMY(r.date)} (${getWeekdayFullRu(r.date)})`;
        if (!groupedByDate[dateKey]) {
          groupedByDate[dateKey] = [];
        }
        groupedByDate[dateKey].push(r.time);
      });
      
      const list = Object.keys(groupedByDate).sort().map(date => {
        const timesList = groupedByDate[date].sort().join(', ');
        return `${date}:\n  ${timesList}`;
      }).join('\n\n');
      
      ctx.reply('–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:\n' + list);
    });
  });

bot.hears('üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const today = new Date().toISOString().split('T')[0];
  db.all(
    `SELECT b.id, b.user_id, b.username, b.full_name, s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE s.date=? AND b.status='confirmed' ORDER BY s.date, s.time`,
    [today],
    (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.');
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const groupedByTime = {};
      rows.forEach(r => {
        if (!groupedByTime[r.time]) {
          groupedByTime[r.time] = [];
        }
        groupedByTime[r.time].push(`@${r.username || ''} (${r.full_name || ''})`);
      });
      
      const list = Object.keys(groupedByTime).sort().map(time => 
        `${time}: ${groupedByTime[time].join(', ')}`
      ).join('\n');
      
      ctx.reply(`–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${formatDateDMY(today)} ${getWeekdayFullRu(today)}):\n${list}`);
    }
  );
});

bot.hears('üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const tomorrow = new Date(Date.now() + 24*60*60*1000).toISOString().split('T')[0];
  db.all(
    `SELECT b.id, b.user_id, b.username, b.full_name, s.date, s.time FROM bookings b JOIN slots s ON b.slot_id=s.id WHERE s.date=? AND b.status='confirmed' ORDER BY s.date, s.time`,
    [tomorrow],
    (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–ù–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.');
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const groupedByTime = {};
      rows.forEach(r => {
        if (!groupedByTime[r.time]) {
          groupedByTime[r.time] = [];
        }
        groupedByTime[r.time].push(`@${r.username || ''} (${r.full_name || ''})`);
      });
      
      const list = Object.keys(groupedByTime).sort().map(time => 
        `${time}: ${groupedByTime[time].join(', ')}`
      ).join('\n');
      
      ctx.reply(`–ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${formatDateDMY(tomorrow)} ${getWeekdayFullRu(tomorrow)}):\n${list}`);
    }
  );
});



function formatDateDMY(dateStr) {
  if (!dateStr) return '';
  const [y, m, d] = dateStr.split('-');
  return `${d}.${m}.${y}`;
}

function getWeekdayFullRu(dateStr) {
  const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
  const [y, m, d] = dateStr.split('-');
  const date = new Date(`${y}-${m}-${d}`);
  return days[date.getDay()];
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ)
bot.on('text', (ctx, next) => {
  if (ctx.from.id === ADMIN_ID && adminBroadcastStep[ctx.from.id]) {
    const text = ctx.message.text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    if (text.startsWith('/') || text.includes('üìä') || text.includes('üü¢') || text.includes('üìÜ') || text.includes('‚ûï') || text.includes('‚ûñ') || text.includes('üì¢') || text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É') {
      // –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
      adminBroadcastStep[ctx.from.id] = false;
      return next();
    }
    
    if (!text) {
      ctx.reply('–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
      return;
    }
    
    db.all(`SELECT DISTINCT user_id FROM bookings`, [], (err, rows) => {
      if (!rows || rows.length === 0) return ctx.reply('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
      rows.forEach(r => {
        bot.telegram.sendMessage(r.user_id, text).catch(() => {});
      });
      ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
      adminBroadcastStep[ctx.from.id] = false;
    });
    return;
  }
  return next();
});

// –°–±—Ä–æ—Å webhook –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling
async function startBot() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await initDatabase();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook
    await bot.telegram.deleteWebhook();
    console.log('Webhook —Å–±—Ä–æ—à–µ–Ω');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å polling
    await bot.launch({ polling: true });
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å polling');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
    if (error.message.includes('409')) {
      console.log('–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
      setTimeout(startBot, 5000);
    } else {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

// Graceful stop
process.once('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
});
