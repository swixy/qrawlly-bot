// scenes/addslot.js
const { Markup } = require('telegraf');
const { WizardScene } = require('telegraf/scenes');
const db = require('../db');
const { logCtx } = require('../logger');

function formatDateDMY(dateStr) {
  if (!dateStr) return '';
  const [y, m, d] = dateStr.split('-');
  return `${d}.${m}.${y}`;
}

function getWeekdayFullRu(dateStr) {
  const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
  const [y, m, d] = dateStr.split('-');
  const date = new Date(`${y}-${m}-${d}`);
  return days[date.getDay()];
}

function showAdminMenu(ctx) {
  return ctx.reply('–ê–¥–º–∏–Ω-–º–µ–Ω—é:', Markup.keyboard([
    ['üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üü¢ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã'],
    ['üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç'],
    ['üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é', '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç'],
    ['üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞']
  ]).resize());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ booking.js)
function createCalendarKeyboard(year, month, existingDates = []) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (typeof year !== 'number' || typeof month !== 'number' || month < 0 || month > 11) {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
  }
  
  const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                     '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
  
  const keyboard = [];
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
  keyboard.push([Markup.button.callback(`${monthNames[month]} ${year}`, 'ignore')]);
  
  // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
  keyboard.push([
    Markup.button.callback('–ü–Ω', 'ignore'),
    Markup.button.callback('–í—Ç', 'ignore'),
    Markup.button.callback('–°—Ä', 'ignore'),
    Markup.button.callback('–ß—Ç', 'ignore'),
    Markup.button.callback('–ü—Ç', 'ignore'),
    Markup.button.callback('–°–±', 'ignore'),
    Markup.button.callback('–í—Å', 'ignore')
  ]);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const daysInMonth = lastDay.getDate();
  const startWeekday = firstDay.getDay() || 7; // 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
  
  let currentRow = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
  for (let i = 1; i < startWeekday; i++) {
    currentRow.push(Markup.button.callback(' ', 'ignore'));
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
  for (let day = 1; day <= daysInMonth; day++) {
    const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    const isPast = dateStr < todayStr;
    const hasSlots = existingDates.includes(dateStr);
    
    let buttonText = String(day);
    let callbackData = 'ignore';
    
    if (!isPast) {
      callbackData = `date_${dateStr}`;
      if (hasSlots) {
        buttonText = `üìÖ${day}`; // –î–∞—Ç–∞ —Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
      }
    } else {
      buttonText = `‚ùå${day}`; // –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
    }
    
    currentRow.push(Markup.button.callback(buttonText, callbackData));
    
    if (currentRow.length === 7) {
      keyboard.push(currentRow);
      currentRow = [];
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
  if (currentRow.length > 0) {
    while (currentRow.length < 7) {
      currentRow.push(Markup.button.callback(' ', 'ignore'));
    }
    keyboard.push(currentRow);
  }
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
  const prevMonth = month === 0 ? 11 : month - 1;
  const prevYear = month === 0 ? year - 1 : year;
  const nextMonth = month === 11 ? 0 : month + 1;
  const nextYear = month === 11 ? year + 1 : year;
  
  keyboard.push([
    Markup.button.callback('‚óÄÔ∏è', `month_${prevYear}_${prevMonth}`),
    Markup.button.callback('‚ñ∂Ô∏è', `month_${nextYear}_${nextMonth}`)
  ]);
  
  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
  keyboard.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')]);
  
  return Markup.inlineKeyboard(keyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏
function getExistingSlotDates() {
  return new Promise((resolve) => {
    db.all(`SELECT DISTINCT date FROM slots`, [], (err, rows) => {
      if (err || !rows) {
        resolve([]);
        return;
      }
      const existingDates = rows.map(row => row.date);
      resolve(existingDates);
    });
  });
}

const addslotScene = new WizardScene(
  'addslot',
  // –®–∞–≥ 1: –≤—ã–±–æ—Ä –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  async (ctx) => {
    logCtx(ctx, 'admin_addslot_enter');
    const today = new Date();
    const year = today.getFullYear();
    const month = today.getMonth();
    
    const existingDates = await getExistingSlotDates();
    const calendarKeyboard = createCalendarKeyboard(year, month, existingDates);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–µ–∑ —Å–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', calendarKeyboard);
    ctx.wizard.state.data = {};
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  async (ctx) => {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–≤–æ–ª–∏–º –≤—ã–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º
    const text = ctx.message?.text;
    if (text === '‚ùå –û—Ç–º–µ–Ω–∞' || text === '–û—Ç–º–µ–Ω–∞') {
      logCtx(ctx, 'admin_addslot_cancel_on_date');
      await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      await showAdminMenu(ctx);
      return ctx.scene.leave();
    }

    if (!ctx.callbackQuery) return;
    
    const action = ctx.callbackQuery.data;
    await ctx.answerCbQuery();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    if (action.startsWith('month_')) {
      try {
        const [, year, month] = action.split('_');
        const existingDates = await getExistingSlotDates();
        const calendarKeyboard = createCalendarKeyboard(parseInt(year), parseInt(month), existingDates);
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', calendarKeyboard);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º:', error);
        await ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if (action === 'back_to_main') {
      logCtx(ctx, 'admin_addslot_back_from_date');
      await ctx.editMessageText('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      await showAdminMenu(ctx);
      return ctx.scene.leave();
    }
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
    if (action === 'ignore') {
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    if (action.startsWith('date_')) {
      const dateIso = action.replace('date_', '');
      ctx.wizard.state.data.date = dateIso;
      logCtx(ctx, 'admin_addslot_date_selected', { date: dateIso });
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
      db.all(`SELECT time, is_booked FROM slots WHERE date=? ORDER BY time`, [dateIso], (err, rows) => {
        let message = `–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ${formatDateDMY(dateIso)} (${getWeekdayFullRu(dateIso)})\n\n`;
        
        if (rows && rows.length > 0) {
          const bookedSlots = rows.filter(slot => slot.is_booked === 1).map(slot => slot.time);
          const freeSlots = rows.filter(slot => slot.is_booked === 0).map(slot => slot.time);
          
          if (bookedSlots.length > 0) {
            message += `üìÖ –£–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã: ${bookedSlots.join(', ')}\n`;
          }
          if (freeSlots.length > 0) {
            message += `üü¢ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: ${freeSlots.join(', ')}\n`;
          }
          message += `\n`;
        } else {
          message += `üìù –ù–∞ —ç—Ç—É –¥–∞—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤\n\n`;
        }
        
        message += `–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—ë–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (—Ñ–æ—Ä–º–∞—Ç HH:MM) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.\n\n–ü—Ä–∏–º–µ—Ä: 10:00 12:30 15:45`;
        
        ctx.editMessageText(message);
        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã—Ö–æ–¥–∞/–≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        ctx.reply('–û–∂–∏–¥–∞—é –≤—Ä–µ–º—è(–µ–Ω–∞) —Å–ª–æ—Ç–æ–≤:', Markup.keyboard([[
          '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã', '‚ùå –û—Ç–º–µ–Ω–∞'
        ]]).resize());
        return ctx.wizard.next();
      });
    }
  },
  // –®–∞–≥ 3: –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
  async (ctx) => {
    const text = ctx.message?.text?.trim();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞/–≤–æ–∑–≤—Ä–∞—Ç–∞
    if (text === '‚ùå –û—Ç–º–µ–Ω–∞' || text === '–û—Ç–º–µ–Ω–∞') {
      logCtx(ctx, 'admin_addslot_cancel_on_time');
      await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.', Markup.removeKeyboard());
      await showAdminMenu(ctx);
      return ctx.scene.leave();
    }
    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã' || text === '–ù–∞–∑–∞–¥') {
      logCtx(ctx, 'admin_addslot_back_to_date');
      await ctx.reply('–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã...', Markup.removeKeyboard());
      await ctx.scene.leave();
      await ctx.scene.enter('addslot');
      return;
    }

    if (!text) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.');
    }

    const times = text.split(' ').filter(t => /^\d{2}:\d{2}$/.test(t));
    if (times.length === 0) {
      return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.');
    }

    const { date } = ctx.wizard.state.data;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    db.all(`SELECT time FROM slots WHERE date=?`, [date], (err, existingSlots) => {
      if (err) {
        return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ—Ç–æ–≤.', Markup.removeKeyboard());
      }
      
      const existingTimes = existingSlots.map(slot => slot.time);
      const duplicateTimes = times.filter(time => existingTimes.includes(time));
      const newTimes = times.filter(time => !existingTimes.includes(time));
      
      let message = `–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ—Ç—ã:\nüìÖ ${formatDateDMY(date)} (${getWeekdayFullRu(date)})\n\n`;
      
      if (newTimes.length > 0) {
        message += `‚úÖ –ù–æ–≤—ã–µ —Å–ª–æ—Ç—ã: ${newTimes.join(', ')}\n`;
      }
      
      if (duplicateTimes.length > 0) {
        message += `‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: ${duplicateTimes.join(', ')}\n`;
      }
      
      if (newTimes.length === 0) {
        const slotText = duplicateTimes.length === 1 ? '–£–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ª–æ—Ç' : '–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã';
        const timeText = duplicateTimes.length === 1 ? '–≤—Ä–µ–º—è' : '–≤—Ä–µ–º–µ–Ω–∞';
        return ctx.reply(`${slotText} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ ${timeText} –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.`);
      }
      
      ctx.wizard.state.data.times = newTimes; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã
      logCtx(ctx, 'admin_addslot_times_input', { date, times: newTimes });
      
      message += `\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?`;
      
      ctx.reply(message, Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞', 'confirm'), Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
      ]));
      return ctx.wizard.next();
    });
  },
  // –®–∞–≥ 4: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async (ctx) => {
    if (!ctx.callbackQuery) return;

    const action = ctx.callbackQuery.data;
    const { date, times } = ctx.wizard.state.data;

    if (action === 'cancel') {
      await ctx.answerCbQuery();
      logCtx(ctx, 'admin_addslot_cancel_on_confirm');
      await ctx.editMessageText('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      await showAdminMenu(ctx);
      return ctx.scene.leave();
    }

    if (action === 'confirm') {
      await ctx.answerCbQuery();

      let added = 0;
      for (const time of times) {
        await new Promise(resolve => {
          db.run(`INSERT INTO slots (date, time) VALUES (?, ?)`, [date, time], function (err) {
            if (!err) added++;
            resolve();
          });
        });
      }

      logCtx(ctx, 'admin_addslot_confirm', { date, times, added });

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      db.all(`SELECT time, is_booked FROM slots WHERE date=? ORDER BY time`, [date], (err, rows) => {
        let message = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${added} —Å–ª–æ—Ç–æ–≤ –Ω–∞ ${formatDateDMY(date)} (${getWeekdayFullRu(date)}): ${times.join(', ')}\n\n`;
        message += `üìã –ò—Ç–æ–≥–æ –Ω–∞ ${formatDateDMY(date)}:\n`;
        
        if (rows && rows.length > 0) {
          const bookedSlots = rows.filter(slot => slot.is_booked === 1).map(slot => slot.time);
          const freeSlots = rows.filter(slot => slot.is_booked === 0).map(slot => slot.time);
          
          if (bookedSlots.length > 0) {
            message += `üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã: ${bookedSlots.join(', ')}\n`;
          }
          if (freeSlots.length > 0) {
            message += `üü¢ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: ${freeSlots.join(', ')}\n`;
          }
          message += `\n–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${rows.length}`;
        }
        
        ctx.editMessageText(message);
        showAdminMenu(ctx);
        return ctx.scene.leave();
      });
    }
  }
);

module.exports = addslotScene;
