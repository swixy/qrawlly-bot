const { Markup } = require('telegraf');
const { WizardScene } = require('telegraf/scenes');
const db = require('../db');

function formatDateDMY(dateStr) {
  if (!dateStr) return '';
  const [y, m, d] = dateStr.split('-');
  return `${d}.${m}.${y}`;
}

function getWeekdayFullRu(dateStr) {
  const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
  const [y, m, d] = dateStr.split('-');
  const date = new Date(`${y}-${m}-${d}`);
  return days[date.getDay()];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function createCalendarKeyboard(year, month, availableDates = []) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (typeof year !== 'number' || typeof month !== 'number' || month < 0 || month > 11) {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
  }
  
  const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                     '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
  
  const keyboard = [];
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
  keyboard.push([Markup.button.callback(`${monthNames[month]} ${year}`, 'ignore')]);
  
  // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
  keyboard.push([
    Markup.button.callback('–ü–Ω', 'ignore'),
    Markup.button.callback('–í—Ç', 'ignore'),
    Markup.button.callback('–°—Ä', 'ignore'),
    Markup.button.callback('–ß—Ç', 'ignore'),
    Markup.button.callback('–ü—Ç', 'ignore'),
    Markup.button.callback('–°–±', 'ignore'),
    Markup.button.callback('–í—Å', 'ignore')
  ]);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const daysInMonth = lastDay.getDate();
  const startWeekday = firstDay.getDay() || 7; // 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
  
  let currentRow = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
  for (let i = 1; i < startWeekday; i++) {
    currentRow.push(Markup.button.callback(' ', 'ignore'));
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
  for (let day = 1; day <= daysInMonth; day++) {
    const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    const isAvailable = availableDates.includes(dateStr);
    const isPast = dateStr < todayStr;
    
    let buttonText = String(day);
    let callbackData = 'ignore';
    
    if (isAvailable && !isPast) {
      callbackData = `date_${dateStr}`;
    } else {
      buttonText = `‚ùå${day}`; // –ò –ø—Ä–æ—à–µ–¥—à–∏–µ, –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    }
    
    currentRow.push(Markup.button.callback(buttonText, callbackData));
    
    if (currentRow.length === 7) {
      keyboard.push(currentRow);
      currentRow = [];
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
  if (currentRow.length > 0) {
    while (currentRow.length < 7) {
      currentRow.push(Markup.button.callback(' ', 'ignore'));
    }
    keyboard.push(currentRow);
  }
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
  const prevMonth = month === 0 ? 11 : month - 1;
  const prevYear = month === 0 ? year - 1 : year;
  const nextMonth = month === 11 ? 0 : month + 1;
  const nextYear = month === 11 ? year + 1 : year;
  
  keyboard.push([
    Markup.button.callback('‚óÄÔ∏è', `month_${prevYear}_${prevMonth}`),
    Markup.button.callback('‚ñ∂Ô∏è', `month_${nextYear}_${nextMonth}`)
  ]);
  
  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
  keyboard.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')]);
  
  return Markup.inlineKeyboard(keyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
function getAvailableDates() {
  return new Promise((resolve) => {
    db.all(`SELECT DISTINCT date FROM slots WHERE is_booked=0`, [], (err, rows) => {
      if (err || !rows) {
        resolve([]);
        return;
      }
      const availableDates = rows.map(row => row.date);
      resolve(availableDates);
    });
  });
}

const bookingScene = new WizardScene(
  'booking',
  // –®–∞–≥ 1: –≤—ã–±–æ—Ä –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  async (ctx) => {
    const today = new Date();
    const year = today.getFullYear();
    const month = today.getMonth();
    
    const availableDates = await getAvailableDates();
    const calendarKeyboard = createCalendarKeyboard(year, month, availableDates);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–º–æ—â–∏
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', Markup.keyboard([['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']]).resize());
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', calendarKeyboard);
    ctx.wizard.state.data = {};
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –ø–æ–∫–∞–∑ –≤—Ä–µ–º–µ–Ω–∏
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if (ctx.message && ctx.message.text === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
        ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
        ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
      ]).resize());
      return ctx.scene.leave();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
    if (ctx.message && ctx.message.text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
      await ctx.reply('@streetnoiser - —Å–≤—è–∑–∞—Ç—å—Å—è');
      return;
    }
    
    if (!ctx.callbackQuery) return;
    
    const action = ctx.callbackQuery.data;
    await ctx.answerCbQuery();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    if (action.startsWith('month_')) {
      try {
        const [, year, month] = action.split('_');
        const availableDates = await getAvailableDates();
        const calendarKeyboard = createCalendarKeyboard(parseInt(year), parseInt(month), availableDates);
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', calendarKeyboard);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º:', error);
        await ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      return;
    }
    

    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if (action === 'back_to_main') {
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
        ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
        ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
      ]).resize());
      return ctx.scene.leave();
    }
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
    if (action === 'ignore') {
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    if (action.startsWith('date_')) {
      const dateIso = action.replace('date_', '');
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
      ctx.wizard.state.data = { date: dateIso };
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
      db.all(`SELECT time FROM slots WHERE date=? AND is_booked=0 ORDER BY time`, [dateIso], (err, rows) => {
        if (rows.length === 0) {
          ctx.editMessageText(`–ù–∞ ${formatDateDMY(dateIso)} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.`);
          return;
        }
        
        const timeButtons = rows.map(r => [Markup.button.callback(r.time, `time_${r.time}`)]);
        timeButtons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é', 'back_to_calendar')]);
        
        ctx.editMessageText(`–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ${formatDateDMY(dateIso)} (${getWeekdayFullRu(dateIso)})\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:`, 
          Markup.inlineKeyboard(timeButtons));
        return ctx.wizard.next();
      });
    }
  },
  // –®–∞–≥ 3: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if (ctx.message && ctx.message.text === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
        ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
        ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
      ]).resize());
      return ctx.scene.leave();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
    if (ctx.message && ctx.message.text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
      await ctx.reply('@streetnoiser - —Å–≤—è–∑–∞—Ç—å—Å—è');
      return;
    }
    
    if (!ctx.callbackQuery) return;
    
    const action = ctx.callbackQuery.data;
    await ctx.answerCbQuery();
    
    // –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    if (action === 'back_to_calendar') {
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
      await ctx.scene.leave();
      await ctx.scene.enter('booking');
      return;
    }
    
    // –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    if (action.startsWith('time_')) {
      const time = action.replace('time_', '');
      ctx.wizard.state.data.time = time;
      const { date } = ctx.wizard.state.data;
      
      await ctx.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${formatDateDMY(date)} –≤ ${time}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?`, 
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–∞', 'confirm'), Markup.button.callback('‚ùå –ù–µ—Ç', 'cancel')]
        ]));
      return ctx.wizard.next();
    }
  },
  // –®–∞–≥ 4: –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if (ctx.message && ctx.message.text === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
        ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
        ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
      ]).resize());
      return ctx.scene.leave();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
    if (ctx.message && ctx.message.text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
      await ctx.reply('@streetnoiser - —Å–≤—è–∑–∞—Ç—å—Å—è');
      return;
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }
);

bookingScene.action('confirm', async (ctx) => {
  await ctx.answerCbQuery();
  const { date, time } = ctx.wizard.state.data;
  const user = ctx.from;
  db.get(`SELECT id FROM slots WHERE date=? AND time=? AND is_booked=0`, [date, time], (err, slot) => {
    if (!slot) {
      ctx.editMessageText('–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.');
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
        ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
        ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
      ]).resize());
      return ctx.scene.leave();
    }
    db.run(`UPDATE slots SET is_booked=1 WHERE id=?`, [slot.id]);
    db.run(`INSERT INTO bookings (user_id, username, full_name, slot_id, created_at, status) VALUES (?,?,?,?,datetime('now'),'confirmed')`,
      [user.id, user.username || '', user.first_name || '', slot.id]);
    ctx.editMessageText(`‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\nüìÖ –î–∞—Ç–∞: ${formatDateDMY(date)} (${getWeekdayFullRu(date)})\n‚è∞ –í—Ä–µ–º—è: ${time}`);
    ctx.telegram.sendMessage(process.env.ADMIN_ID || require('../config').ADMIN_ID,
      `–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: ${user.first_name} @${user.username}\n${formatDateDMY(date)} ${time}`);
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
      ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
      ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
      ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
    ]).resize());
    return ctx.scene.leave();
  });
});

bookingScene.action('cancel', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.editMessageText('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
    ['‚úÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É'],
    ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
  ]).resize());
  return ctx.scene.leave();
});

module.exports = bookingScene;
